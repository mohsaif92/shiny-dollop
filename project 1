import tkinter as tk
from tkinter import ttk
import sqlite3
import uuid
import ctypes
import csv

def generate_item_id():
    item_id = str(uuid.uuid4())[:8].upper()
    return item_id

def add_item():
    item_name = entry_name.get()
    item_price = entry_price.get()
    item_quantity = entry_quantity.get()

    if not item_name or not item_quantity:
        error_label.config(text="Please enter Item Name and Quantity", fg="red")
    elif not item_price.isdigit():
        error_label.config(text="Invalid Price: Please enter a valid number", fg="red")
    else:
        error_label.config(text="")

        if check_duplicates(item_name, item_price):
            error_label.config(text="Duplicate entry: Item already exists", fg="red")
        else:
            item_id = generate_item_id()
            conn = sqlite3.connect('inventory.db')
            cursor = conn.cursor()
            cursor.execute('INSERT INTO items (id, name, price, quantity) VALUES (?, ?, ?, ?)',
                           (item_id, item_name, item_price, item_quantity))
            conn.commit()
            conn.close()
            index = tree.insert('', 'end', values=(item_id, item_name, item_price, item_quantity, ''))
            tree.set(index, "Actions", tk.Button(table_frame, text="Edit", command=lambda i=index: edit_item(i)))
            entry_name.delete(0, tk.END)
            entry_price.delete(0, tk.END)
            entry_quantity.delete(0, tk.END)
def edit_item(item_index):
    item_id = tree.item(item_index, 'values')[0]
    item_name = tree.item(item_index, 'values')[1]
    item_price = tree.item(item_index, 'values')[2]
    item_quantity = tree.item(item_index, 'values')[3]

    edit_window = tk.Toplevel(window)
    edit_window.title("Edit Item")

    # Create labels
    label_name = tk.Label(edit_window, text="Item Name:")
    label_name.grid(row=0, column=0, sticky=tk.E)

    label_price = tk.Label(edit_window, text="Item Price:")
    label_price.grid(row=1, column=0, sticky=tk.E)

    label_quantity = tk.Label(edit_window, text="Item Quantity:")
    label_quantity.grid(row=2, column=0, sticky=tk.E)

    # Create entry fields
    entry_name = tk.Entry(edit_window)
    entry_name.insert(tk.END, item_name)
    entry_name.grid(row=0, column=1)

    entry_price = tk.Entry(edit_window)
    entry_price.insert(tk.END, item_price)
    entry_price.grid(row=1, column=1)

    entry_quantity = tk.Entry(edit_window)
    entry_quantity.insert(tk.END, item_quantity)
    entry_quantity.grid(row=2, column=1)
    save_button = tk.Button(edit_window, text="Save", command=lambda: save_edited_item(item_index, item_id, entry_name.get(), entry_price.get(), entry_quantity.get()))
    save_button.grid(row=3, column=1, pady=10)

def save_edited_item(item_index, item_id, name, price, quantity):
    if not name or not quantity:
        error_label.config(text="Please enter Item Name and Quantity", fg="red")
    elif not price.isdigit():
        error_label.config(text="Invalid Price: Please enter a valid number", fg="red")
    else:
        error_label.config(text="")

        conn = sqlite3.connect('inventory.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE items SET name=?, price=?, quantity=? WHERE id=?',
                       (name, price, quantity, item_id))
        conn.commit()
        conn.close()

        tree.set(item_index, "Item Name", name)
        tree.set(item_index, "Item Price", price)
        tree.set(item_index, "Item Quantity", quantity)


def check_duplicates(name, price):
    duplicates = False
    for child in tree.get_children():
        values = tree.item(child, 'values')
        if values[1] == name and values[2] == price:
            duplicates = True
            break
    return duplicates

def delete_item():
    selected_item = tree.focus()
    if selected_item:
        item_id = tree.item(selected_item, 'values')[0]
        tree.delete(selected_item)

        conn = sqlite3.connect('inventory.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM items WHERE id=?', (item_id,))
        conn.commit()
        conn.close()


def save_inventory():
    file_path = tk.filedialog.asksaveasfilename(defaultextension=".csv",
                                                filetypes=[("CSV Files", "*.csv")])
    if file_path:
        with open(file_path, 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(["Item ID", "Item Name", "Item Price", "Item Quantity"])
            for child in tree.get_children():
                values = tree.item(child, 'values')
                writer.writerow(values)

def load_inventory():
    file_path = tk.filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
    if file_path:
        clear_table()
        with open(file_path, 'r') as file:
            reader = csv.reader(file)
            next(reader)  # Skip header row
            for row in reader:
                tree.insert('', 'end', values=row)

def clear_table():
    tree.delete(*tree.get_children())

def search_item():
    keyword = entry_search.get().strip().lower()
    tree.delete(*tree.get_children())

    conn = sqlite3.connect('inventory.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM items')
    rows = cursor.fetchall()
    for row in rows:
        if keyword in str(row).lower():
            tree.insert('', 'end', values=row)
    conn.close()

user32 = ctypes.windll.user32
screen_width = user32.GetSystemMetrics(0)
screen_height = user32.GetSystemMetrics(1)

window = tk.Tk()
window.title("Inventory Management")
window.geometry(f"{screen_width}x{screen_height}")

entry_frame = tk.Frame(window)
entry_frame.pack(side=tk.LEFT, padx=10, pady=10)

label_name = tk.Label(entry_frame, text="Item Name:")
label_name.grid(row=0, column=0, sticky=tk.E)

label_price = tk.Label(entry_frame, text="Item Price:")
label_price.grid(row=1, column=0, sticky=tk.E)

label_quantity = tk.Label(entry_frame, text="Item Quantity:")
label_quantity.grid(row=2, column=0, sticky=tk.E)

entry_name = tk.Entry(entry_frame)
entry_name.grid(row=0, column=1)

entry_price = tk.Entry(entry_frame)
entry_price.grid(row=1, column=1)

entry_quantity = tk.Entry(entry_frame)
entry_quantity.grid(row=2, column=1)

add_button = tk.Button(entry_frame, text="Add Item", command=add_item)
add_button.grid(row=3, column=1, pady=10)

delete_button = tk.Button(entry_frame, text="Delete Item", command=delete_item)
delete_button.grid(row=4, column=1)

error_label = tk.Label(entry_frame, text="", fg="red")
error_label.grid(row=5, column=1)

search_frame = tk.Frame(window)
search_frame.pack(side=tk.TOP, padx=10, pady=10, anchor="ne")

entry_search = tk.Entry(search_frame)
entry_search.grid(row=0, column=0)

search_button = tk.Button(search_frame, text="Search", command=search_item)
search_button.grid(row=0, column=1, padx=5)

table_frame = tk.Frame(window)
table_frame.pack(side=tk.LEFT, padx=10, pady=10, fill=tk.BOTH, expand=True)

columns = ("Item ID", "Item Name", "Item Price", "Item Quantity",)
tree = ttk.Treeview(table_frame, columns=columns, show="headings")

for col in columns:
    tree.heading(col, text=col)

tree.pack(fill=tk.BOTH, expand=True)

conn = sqlite3.connect('inventory.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS items
                  (id TEXT, name TEXT, price REAL, quantity INTEGER)''')
conn.commit()
conn.close()

conn = sqlite3.connect('inventory.db')
cursor = conn.cursor()
cursor.execute('SELECT * FROM items')
rows = cursor.fetchall()
for row in rows:
    tree.insert('', 'end', values=row)
conn.close()

validate_price = window.register(validate_price_input)
entry_price.config(validate="key", validatecommand=(validate_price, '%S'))
validate_quantity = window.register(validate_quantity_input)
entry_quantity.config(validate="key", validatecommand=(validate_quantity, '%S'))

menu_bar = tk.Menu(window)
file_menu = tk.Menu(menu_bar, tearoff=0)
file_menu.add_command(label="Save Inventory", command=save_inventory)
file_menu.add_command(label="Load Inventory", command=load_inventory)
file_menu.add_separator()
file_menu.add_command(label="Clear Table", command=clear_table)
menu_bar.add_cascade(label="File", menu=file_menu)
window.config(menu=menu_bar)

window.mainloop()

